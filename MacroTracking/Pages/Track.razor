@page "/"

@using Models;
@using Constants;

<PageTitle>Track</PageTitle>

<div class="Facade">
    <!--Header Texts-->
    <div class="FlexViewer">
        <h1>Calories</h1>
        <h1>Protein </h1>
        <h1>Carbs   </h1>
        <h1>Fat     </h1>
    </div>

    <!--Progress Bars-->
    <div class="FlexViewer">
        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@CalorieBarStyle>
                <p class="ProgressBarText" style=@CalorieBarTextStyle>@CalorieBar</p>
            </div>
        </div>

        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@ProteinBarStyle>
                <p class="ProgressBarText" style=@ProteinBarTextStyle>@ProteinBar</p>
            </div>
        </div>

        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@CarbsBarStyle>
                <p class="ProgressBarText" style=@CarbsBarTextStyle>@CarbsBar</p>
            </div>
        </div>

        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@FatBarStyle>
                <p class="ProgressBarText" style=@FatBarTextStyle>@FatBar</p>
            </div>
        </div>
    </div>

    <!--Macro Amount Texts-->
    <div class="FlexViewer">
        <h2>@CalorieText</h2>
        <h2>@ProteinText</h2>
        <h2>@CarbsText</h2>
        <h2>@FatText</h2>
    </div>

    <!--Track Item Viewer-->
    <div class="FlexViewerVertical" style="margin-top: 40px; max-width: 100%;">
        <h3>Add Items</h3>
        <div class="FlexViewerNoSpacing">
            <ol>
                @foreach (var item in ListItems)
                {      
                    <li @onclick="@(x => GetMacroItemDetailsAsync(@item.Id))">@item.Name</li>
                }
            </ol>
            <div class="FlexViewerVertical" style="width: 30%; max-width: 500px; background-color: antiquewhite;">
                <div class="DisplayItem"> 
                    <p style="margin-left: 15px; margin-top: 10px;">
                         @($"Description: {@MacroDisplayName}")
                    </p>
                    <p style="margin-left: 22px;">
                        @($"Calories: {@MacroDisplayCalories}")
                    </p>
                    <p style="margin-left: 22px;">
                        @($"Protein: {@MacroDisplayProtein}") 
                    </p>
                    <p style="margin-left: 26px;">
                        @($"Carbs: {@MacroDisplayCarbs}")
                    </p>
                    <p style="margin-left: 28px;">
                        @($"Fat: {@MacroDisplayFat}")
                    </p>
                </div>

                <div class="DisplayItem"> Testing</div> 
            </div>
            <ol>
                @foreach (var item in ListItemsAdded)
                {      
                    <li @key="item">@item.Name</li>
                }
            </ol>

        </div>
    </div>
  
</div>

@code {
    private string? CalorieBar { get; set; }
    private string? CalorieBarStyle { get; set; }
    private string? CalorieBarTextStyle { get; set; }

    private string? ProteinBar { get; set; }
    private string? ProteinBarStyle { get; set; }
    private string? ProteinBarTextStyle { get; set; }

    private string? CarbsBar { get; set; }
    private string? CarbsBarStyle { get; set; }
    private string? CarbsBarTextStyle { get; set; }

    private string? FatBar { get; set; }
    private string? FatBarStyle { get; set; }
    private string? FatBarTextStyle { get; set; }

    private string? CalorieText { get; set; }
    private string? ProteinText { get; set; }
    private string? CarbsText { get; set; }
    private string? FatText { get; set; }

    private string? MacroDisplayName { get; set; }
    private double? MacroDisplayCalories { get; set; }
    private double? MacroDisplayProtein { get; set; }
    private double? MacroDisplayCarbs { get; set; }
    private double? MacroDisplayFat { get; set; }

    private List<MacroItem> ListItems = new List<MacroItem>()
    {
        new MacroItem(0, "test", 12.2, 1, 1231213.2, 1),
        new MacroItem(1, "test1", 1231213.2, 1, 1231213.2, 1),
        new MacroItem(2, "test2", 0.2, 1, 1231213.2, 1),
        new MacroItem(3, "test3", .1, 1, 1231213.2, 1),
        new MacroItem(4, "testaswfwefq9rq34fhq34fjq348f 4qf39jq83 fjq348 fjq34u fjq349f asda da sdasd asdasda sdasd asd asd asd adf", 12.2, 1, 1231213.2, 1),
        new MacroItem(5, "test1asdf", 1231213.2, 1, 1231213.2, 1),
        new MacroItem(6, "test21231", 0.2, 1, 1231213.2, 1),
        new MacroItem(7, "test3", .1, 1, 1231213.2, 1),
        new MacroItem(8, "test134", 12.2, 1, 1231213.2, 1),
        new MacroItem(10, "test143456", 1231213.2, 1, 1231213.2, 1),
        new MacroItem(11, "test2765", 0.2, 1, 1231213.2, 1),
        new MacroItem(12, "test3fgh", .1, 1, 1231213.2, 1),
        new MacroItem(13, "testvbnn", 12.2, 1, 1231213.2, 1),
        new MacroItem(14, "test1dsfg345", 1231213.2, 1, 1231213.2, 1),
        new MacroItem(15, "test2fxghdfgnbvn", 0.2, 1, 1231213.2, 1),
        new MacroItem(16, "test33452q45sdfg", .1, 1, 1231213.2, 1)
    };

    private List<MacroItem> ListItemsAdded = new List<MacroItem>();

    protected override async Task OnInitializedAsync() => await InitializeStuff().ConfigureAwait(false);

    private async Task InitializeStuff()
    {
        InitializeTextFields();
        await Task.Run(() => InitializeProgressBars());
    }

    private void InitializeTextFields()
    {
        CalorieText = "100/2500";
        ProteinText = "100/2500";
        CarbsText = "100/2500";
        FatText = "100/2500";

        StateHasChanged();
    }

    private async Task InitializeProgressBars()
    {
        var random = new Random();


        while (1 < 2)
        {
            var rand = random.Next() % 100;

            CalorieBar = rand + "%";
            CalorieBarStyle = "width: " + rand + "%; background-color: " + GetColorBasedOnValue(rand);
            CalorieBarTextStyle = "color: " + GetTextColorBasedOnValue(rand);

            rand = random.Next() % 100;

            ProteinBar = rand + "%";
            ProteinBarStyle = "width: " + rand + "%; background-color: " + GetColorBasedOnValue(rand);
            ProteinBarTextStyle = "color: " + GetTextColorBasedOnValue(rand);

            rand = random.Next() % 100;

            CarbsBar = rand + "%";
            CarbsBarStyle = "width: " + rand + "%; background-color: " + GetColorBasedOnValue(rand);
            CarbsBarTextStyle = "color: " + GetTextColorBasedOnValue(rand) + "; margin-left: -3px;";

            rand = random.Next() % 100;

            FatBar = rand + "%";
            FatBarStyle = "width: " + rand + "%; background-color: " + GetColorBasedOnValue(rand);
            FatBarTextStyle = "color: " + GetTextColorBasedOnValue(rand) + "; margin-left: -10px;";

            await Task.Delay(2500);
            StateHasChanged();
        }
    }

    private async Task GetMacroItemDetailsAsync(int id)
    {
        await Task.Run(() => GetMacroItemDetails(id));
    }

    private void GetMacroItemDetails(int id)
    {
        MacroItem? item = ListItems.Find(x => x.Id == id) ?? new MacroItem(-1, "Err", 0, 0, 0, 0);

        MacroDisplayName = item.Name;
        MacroDisplayCalories = item.Calories;
        MacroDisplayProtein = item.Protein;
        MacroDisplayCarbs = item.Carbs;
        MacroDisplayFat = item.Fat;

        ListItemsAdded.Insert(
            0, 
            new MacroItem(
                999, 
                item.Name, 
                item.Calories, 
                item.Protein, 
                item.Carbs, 
                item.Fat
            )
        );

        StateHasChanged();
    }

    private String GetColorBasedOnValue(int rand)
    {
        if (rand > 0 && rand < 18)
        {
            return Constants.ColorGradiant[0];
        }
        else if (rand > 18 && rand < 36)
        {
            return Constants.ColorGradiant[1];
        }
        else if (rand > 36 && rand < 54)
        {
            return Constants.ColorGradiant[2];
        }
        else if (rand > 54 && rand < 72)
        {
            return Constants.ColorGradiant[3];
        }
         else if (rand > 72 && rand < 90)
        {
            return Constants.ColorGradiant[4];
        }
        else
        {
            return Constants.ColorGradiant[5];
        }
    }

    private String GetTextColorBasedOnValue(int rand)
    {
        if (rand > 0 && rand < 18)
        {
            return Constants.ColorGradiantText[0];
        }
        else if (rand > 18 && rand < 36)
        {
            return Constants.ColorGradiantText[1];
        }
        else if (rand > 36 && rand < 54)
        {
            return Constants.ColorGradiantText[2];
        }
        else if (rand > 54 && rand < 72)
        {
            return Constants.ColorGradiantText[3];
        }
         else if (rand > 72 && rand < 90)
        {
            return Constants.ColorGradiantText[4];
        }
        else
        {
            return Constants.ColorGradiantText[5];
        }
    }
}
@page "/"

@using Models;
@using Constants;
@using Newtonsoft.Json;

@inject HttpClient Http

<PageTitle>Track</PageTitle>

<div class="Facade">

    <!--Header Texts-->
    <div class="FlexViewer">
        <h1>Calories</h1>
        <h1>Protein</h1>
        <h1>Carbs</h1>
        <h1>Fat</h1>
    </div>

    <!--Progress Bars-->
    <div class="FlexViewer">
        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@CalorieBarStyle>
                <p class="ProgressBarText" style=@CalorieBarTextStyle>@CalorieBarText</p>
            </div>
        </div>

        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@ProteinBarStyle>
                <p class="ProgressBarText" style=@ProteinBarTextStyle>@ProteinBarText</p>
            </div>
        </div>

        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@CarbsBarStyle>
                <p class="ProgressBarText" style=@CarbsBarTextStyle>@CarbsBarText</p>
            </div>
        </div>

        <div class="ProgressBarOuter">
            <div class="ProgressBarInner" style=@FatBarStyle>
                <p class="ProgressBarText" style=@FatBarTextStyle>@FatBarText</p>
            </div>
        </div>
    </div>

    <!--Daily Intake Texts-->
    <div class="FlexViewer">
        <h2>@CalorieText</h2>
        <h2>@ProteinText</h2>
        <h2>@CarbsText</h2>
        <h2>@FatText</h2>
    </div>

    <!--Main Viewer-->
    <div class="FlexViewerVertical" style="margin-top: 40px; max-width: 100%;">
        <div class="FlexViewer" style="justify-content: space-between;">
            <h3>Add Items</h3>
            <input class="SearchBar" type="text" @onchange="ListSearchFilterChanged" placeholder="Search..."/>
            <button class="FilterButton" style=@AlphabeticalSortButtonStyle @onclick="(() => FilterListAlphabeticallyAsync())">A-Z</button>
            <button class="FilterButton" style=@BreakfastSortButtonStyle @onclick="(() => FilterListByBreakfastTypeAsync())">Breakfast</button>
            <button class="FilterButton" style=@SnackSortButtonStyle @onclick="(() => FilterListBySnackTypeAsync())">Snack</button>
            <button class="FilterButton" style=@MealSortButtonStyle @onclick="(() => FilterListByMealTypeAsync())">Meal</button>
        </div>
        

        <!--Item Viewer (left side)-->
        <div class="FlexViewerNoSpacing">
            <ol>
                @foreach (var item in ListItems)
                {
                    <li @onclick="@(() => PushToSubmitQueueAsync(@item.Id))">@item.Name</li>
                }
            </ol>

            <!--Item Viewer (middle)-->
            <div class="FlexViewerVertical" style="width: 30%; max-width: 500px; background-color: antiquewhite;">

                <!--Food display texts-->
                <div class="DisplayItem"> 
                    <p class="TruncateText" style="margin-left: 15px; margin-top: 10px;">
                        @($"Description: {@MacroDisplayName}")
                    </p>
                    <p class="TruncateText" style="margin-left: 39px;">
                        @($"Calories: {@MacroDisplayCalories}")
                    </p>
                    <p class="TruncateText" style="margin-left: 48px;">
                        @($"Protein: {@MacroDisplayProtein}") 
                    </p>
                    <p class="TruncateText" style="margin-left: 57px;">
                        @($"Carbs: {@MacroDisplayCarbs}")
                    </p>
                    <p class="TruncateText" style="margin-left: 79px;">
                        @($"Fat: {@MacroDisplayFat}")
                    </p>
                </div>

                <!--Middle buttons-->
                <div class="DisplayItem" style="background-color: papayawhip">
                    <div class="Submit" onclick="">Submit</div>
                </div> 
            </div>

            <!--Item Viewer (right side)-->
            <ol>
                @foreach (var item in ListItemsAdded)
                {
                    <li @key="item" @onclick="@(() => RemoveFromSubmitQueueAsync(@item.Id))">@item.Name</li>
                }
            </ol>

        </div>
    </div>

</div>

@code {
    #region DataBindings

    //Progress Bars
    private string? CalorieBarText { get; set; }
    private string? CalorieBarStyle { get; set; }
    private string? CalorieBarTextStyle { get; set; }

    private string? ProteinBarText { get; set; }
    private string? ProteinBarStyle { get; set; }
    private string? ProteinBarTextStyle { get; set; }

    private string? CarbsBarText { get; set; }
    private string? CarbsBarStyle { get; set; }
    private string? CarbsBarTextStyle { get; set; }

    private string? FatBarText { get; set; }
    private string? FatBarStyle { get; set; }
    private string? FatBarTextStyle { get; set; }

    //Daily Intake Texts
    private string? CalorieText { get; set; }
    private string? ProteinText { get; set; }
    private string? CarbsText { get; set; }
    private string? FatText { get; set; }

    private decimal CalorieTextDigit { get; set; }
    private decimal ProteinTextDigit { get; set; }
    private decimal CarbsTextDigit { get; set; }
    private decimal FatTextDigit { get; set; }

    //Headers and such
    private string? MacroDisplayName { get; set; }
    private decimal? MacroDisplayCalories { get; set; }
    private decimal? MacroDisplayProtein { get; set; }
    private decimal? MacroDisplayCarbs { get; set; }
    private decimal? MacroDisplayFat { get; set; }

    //For use in listing items
    private List<Item> MasterListItems = new List<Item>();
    private List<Item> ListItems = new List<Item>();
    private List<Item> ListItemsAdded = new List<Item>();

    //Button stylings
    private string? AlphabeticalSortButtonStyle { get; set; }
    private string? BreakfastSortButtonStyle { get; set; }
    private string? SnackSortButtonStyle { get; set; }
    private string? MealSortButtonStyle { get; set; }

    //Button booleans
    private bool ListCurrentlyFilteredByAlphabetical { get; set; } = false;
    private bool ListCurrentlyFilteredByBreakfastType { get; set; } = false;
    private bool ListCurrentlyFilteredBySnackType { get; set; } = false;
    private bool ListCurrentlyFilteredByMealType { get; set; } = false;

    #endregion Data Bindings

    #region Start Program

    protected override async Task OnInitializedAsync() => await InitializeStuff().ConfigureAwait(false);

    #endregion Start Program

    #region Initialize

    private async Task InitializeStuff()
    {
        InitializeTextFields();
        await Task.Run(() => PopulateLists());
    }

    private void InitializeTextFields()
    {
        CalorieText = "0/2500";
        ProteinText = "0/2500";
        CarbsText = "0/2500";
        FatText = "0/2500";

        CalorieTextDigit = 0;
        ProteinTextDigit = 0;
        CarbsTextDigit = 0;
        FatTextDigit = 0;

        StateHasChanged();
    }

    private async Task PopulateLists()
    {
        List<Item>? tmp = await Http.GetFromJsonAsync<List<Item>>("data/Items.json");

        if (tmp != null)
        {
            ListItems = tmp;
            MasterListItems = tmp;
        }
    }

    #endregion Initialize

    #region Item List Filtering & Sorting

    private async Task PushToSubmitQueueAsync(int id)
    {
        await Task.Run(() => PushToSubmitQueue(id));
    }

    private async Task RemoveFromSubmitQueueAsync(int id)
    {
        await Task.Run(() => RemoveFromSubmitQueue(id));
    }

    private async Task FilterListAlphabeticallyAsync()
    {
        await Task.Run(() => ApplyFilters(0));
    }

    private async Task FilterListByBreakfastTypeAsync()
    {
        await Task.Run(() => ApplyFilters(1));
    }

    private async Task FilterListBySnackTypeAsync()
    {
        await Task.Run(() => ApplyFilters(2));
    }

    private async Task FilterListByMealTypeAsync()
    {
        await Task.Run(() => ApplyFilters(3));
    }

    private void PushToSubmitQueue(int id)
    {
        Item? item = ListItems.Find(x => x.Id == id);

        if (item is not null)
        {
            MacroDisplayName = item.Name;
            MacroDisplayCalories = item.Calories;
            MacroDisplayProtein = item.Protein;
            MacroDisplayCarbs = item.Carbs;
            MacroDisplayFat = item.Fat;

            CalorieTextDigit += item.Calories;
            ProteinTextDigit += item.Protein;
            CarbsTextDigit += item.Carbs;
            FatTextDigit += item.Fat;

            CalorieText = CalorieTextDigit.ToString("0.00") + "/2500";
            ProteinText = ProteinTextDigit.ToString("0.00") + "/2500";
            CarbsText = CarbsTextDigit.ToString("0.00") + "/2500";
            FatText = FatTextDigit.ToString("0.00") + "/2500";

            UpdateProgressBars();

            ListItemsAdded.Insert(
                0,
                new Item(
                    item.Id,
                    item.Name,
                    item.Calories,
                    item.Protein,
                    item.Carbs,
                    item.Fat,
                    item.FoodType
                )
            );
        }

        StateHasChanged();
    }

    private void RemoveFromSubmitQueue(int id)
    {
        Item? item = ListItemsAdded.Find(x => x.Id == id) ?? null;

        Console.WriteLine(id);

        if (item != null)
        {
            CalorieTextDigit -= item.Calories;
            ProteinTextDigit -= item.Protein;
            CarbsTextDigit -= item.Carbs;
            FatTextDigit -= item.Fat;

            CalorieText = CalorieTextDigit + "/2500";
            ProteinText = ProteinTextDigit + "/2500";
            CarbsText = CarbsTextDigit + "/2500";
            FatText = FatTextDigit + "/2500";

            ListItemsAdded.Remove(item);
        }

        StateHasChanged();
    }

    private void ApplyFilters(int filterType)
    {
        switch (filterType)
        {
            case 0:
                if (ListCurrentlyFilteredByAlphabetical)
                {
                    ListCurrentlyFilteredByAlphabetical = false;
                    ListItems = ListItems.OrderByDescending(x => x.Name).ToList();
                    AlphabeticalSortButtonStyle = "background-color: sandybrown";
                }
                else
                {
                    ListCurrentlyFilteredByAlphabetical = true;
                    ListItems = ListItems.OrderBy(x => x.Name).ToList();
                    AlphabeticalSortButtonStyle = "background-color: darkorange";
                }
                StateHasChanged();
                break;

            case 1:
                if (ListCurrentlyFilteredByBreakfastType)
                {
                    ListCurrentlyFilteredByBreakfastType = false;
                    ListItems = MasterListItems;
                    BreakfastSortButtonStyle = "background-color: sandybrown";
                }
                else
                {
                    //Set breakfast sort
                    ListCurrentlyFilteredByBreakfastType = true;
                    ListItems = MasterListItems.Where(x => x.FoodType == FoodTypes.BREAKFAST).ToList();
                    BreakfastSortButtonStyle = "background-color: darkorange";

                    //Unset other sorts
                    ListCurrentlyFilteredBySnackType = false;
                    SnackSortButtonStyle = "background-color: sandybrown";

                    ListCurrentlyFilteredByMealType = false;
                    MealSortButtonStyle = "background-color: sandybrown";
                }
                StateHasChanged();
                break;

            case 2:
                if (ListCurrentlyFilteredBySnackType)
                {
                    ListCurrentlyFilteredBySnackType = false;
                    ListItems = MasterListItems;
                    SnackSortButtonStyle = "background-color: sandybrown";
                }
                else
                {
                    //Set snack sort
                    ListCurrentlyFilteredBySnackType = true;
                    ListItems = MasterListItems.Where(x => x.FoodType == FoodTypes.SNACK).ToList();
                    SnackSortButtonStyle = "background-color: darkorange";

                    //Unset other sorts
                    ListCurrentlyFilteredByBreakfastType = false;
                    BreakfastSortButtonStyle = "background-color: sandybrown";

                    ListCurrentlyFilteredByMealType = false;
                    MealSortButtonStyle = "background-color: sandybrown";
                }
                StateHasChanged();
                break;

            case 3:
                if (ListCurrentlyFilteredByMealType)
                {
                    ListCurrentlyFilteredByMealType = false;
                    ListItems = MasterListItems;
                    MealSortButtonStyle = "background-color: sandybrown";
                }
                else
                {
                    //Set breakfast sort
                    ListCurrentlyFilteredByMealType = true;
                    ListItems = MasterListItems.Where(x => x.FoodType == FoodTypes.MEAL).ToList();
                    MealSortButtonStyle = "background-color: darkorange";

                    //Unset other sorts
                    ListCurrentlyFilteredByBreakfastType = false;
                    BreakfastSortButtonStyle = "background-color: sandybrown";

                    ListCurrentlyFilteredBySnackType = false;
                    SnackSortButtonStyle = "background-color: sandybrown";
                }
                StateHasChanged();
                break;

            default: break;
        }

    }

    private void UpdateProgressBars()
    {
        CalorieBarStyle = "width: " + ((CalorieTextDigit / new decimal(2500)) * 100).ToString("0.00") + "%;";
        ProteinBarStyle = "width: " + ((ProteinTextDigit / new decimal(2500)) * 100).ToString("0.00") + "%;";
        CarbsBarStyle = "width: " + ((CarbsTextDigit / new decimal(2500)) * 100).ToString("0.00") + "%;";
        FatBarStyle = "width: " + ((FatTextDigit / new decimal(2500)) * 100).ToString("0.00") + "%;";

        StateHasChanged();
    }

    private async void ListSearchFilterChanged(ChangeEventArgs e)
    {
        await PopulateLists();

        if (e is not null)
        {
            var search = (e.Value != null) ? e.Value.ToString().Trim().ToUpper() : "";
            ListItems = ListItems.Where(x => x.Name.ToUpper().Contains(search)).ToList();
        }

        StateHasChanged();
    }

    #endregion Item List Filtering & Sorting

}